name: 'Azure Resource Creation'

on:
  workflow_dispatch:
    inputs:
      resource_type:
        description: Azure resource (user, resource group, storage account, etc.)
        required: true
        type: choice
        options:
          - azure_users
          - azure_resource_groups
      action:
        description: 'terraform command to execute'
        required: true
        type: choice
        default: apply
        options:
          - apply
          - destroy
      request_id:
        description: 'Jira Ticket Id'
        required: true
        type: string
      variables:
        description: 'Variables for the resource in JSON format'
        required: true
        type: string
        
env:
  TF_BACKEND_BUCKET: "terraform-automation-state-store"
  TF_BACKEND_REGION: "us-east-1"

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./${{ github.event.inputs.resource_type }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.10.3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_ROLE }}
        aws-region: ${{ env.TF_BACKEND_REGION }}

    - name: Azure Login with OIDC
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Create working directory if it doesn't exist
      run: mkdir -p ./${{ github.event.inputs.resource_type }}

    - name: Create variables file
      id: create_vars
      run: echo '${{ github.event.inputs.variables }}' > ./${{ github.event.inputs.resource_type }}/variables.tfvars.json

    - name: Initialize Terraform
      run: |
        terraform init \
        -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
        -backend-config="region=${{ env.TF_BACKEND_REGION }}" \
        -backend-config="key=${{ github.event.inputs.resource_type }}/${{ github.event.inputs.request_id }}/tf-state"
  
    - name: Apply or Destroy Terraform
      run: |
        if [ "${{ github.event.inputs.action }}" == "destroy" ]; then
          terraform destroy -auto-approve
        else
          terraform apply -auto-approve -var-file=./${{ github.event.inputs.resource_type }}/variables.tfvars.json
        fi
      env:
        TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}

    - name: Remove state file from Azure Backend (Only on Destroy)
      if: github.event.inputs.action == 'destroy'
      run: |
        az storage blob delete -c ${{ secrets.CONTAINER_NAME }} -n terraform.tfstate --account-name marktfstate --auth-mode login

    # - name: Send output to webhook
    #   if: always()
    #   run: |
    #     if [ -z "${{ env.output }}" ]; then
    #       output="Terraform output not available"
    #     else
    #       output="${{ env.output }}"
    #     fi
    #     curl -X POST -H "Content-Type: application/json" \
    #     -d "{\"output\": ${output}, \"status\": \"${{ job.status }}\"}" \
    #     https://webhooks.workato.com/webhooks/rest/855bb7a0-ec04-4752-8022-044be408d270/github-action-output
